{block content}
	<div class="container">
		<div class="everything-wrapper">
			<h1 class="middle">Dokončit objednávku</h1>
			<div class="row">
				<div class="re66">
					{form purchaseForm}
						<table>
							<tbody>
								{formContainer personalData}
									<tr>
										<td colspan="2">
											<h5 class="form-subheading">Fakturační údaje</h5>
										<td>
									</tr>
									<tr>
										<td class="labels">
											{label name /}
										</td>
										<td class="inputs">
											{input name}
										</td>
									</tr>
									<tr>
										<td>
											{label streetAndNumber /}
										</td>
										<td>
											{input streetAndNumber}
										</td>
									</tr>
									</tr>
										<td>
											{label city /}
										</td>
										<td>
											{input city}
										</td>
									</tr>
									<tr>
										<td>
											{label zip /}
										</td>
										<td>
											{input zip}
										</td>
									</tr>
									<tr>
										<td>
											{label country /}
										</td>
										<td>
											{input country}
										</td>
									</tr>
									<tr>
										<td>
											{label email /}
										</td>
										<td>
											{input email}
										</td>
									</tr>
									<tr>
										<td>
											{label phone /}
										</td>
										<td>
											{input phone} 
										</td>
									</tr>
									<tr>
										<td>{label differentAdress /}</td>
										<td>{input differentAdress}</td>
									</tr>
								{/formContainer}
							</tbody>
							<tbody id="deliveryAdressGroup" hidden>
								{formContainer deliveryAdress}
									<tr>
										<td colspan="2">
											<h5 class="form-subheading">Doručovací adresa</h5>
										</td>
									</tr>
									<tr>
										<td>
											{label streetAndNumber /}
										</td>
										<td>
											{input streetAndNumber}
										</td>
									</tr>
									</tr>
										<td>
											{label city /}
										</td>
										<td>
											{input city}
										</td>
									</tr>
									<tr>
										<td>
											{label zip /}
										</td>
										<td>
											{input zip}
										</td>
									</tr>
									<tr>
										<td>
											{label country /}
										</td>
										<td>
											{input country}
										</td>
									</tr>
								{/formContainer}
							</tbody>
							<tbody>
								{formContainer deliveryTerms}
									<tr>
										<td colspan="2">
											<h5 class="form-subheading">Dodací podmínky</h5>
										</td>
									</tr>
									<tr>
										<td>{label delivery /}</td>
										<td>
											{input delivery}
										</td>
									</tr>
									<tr class="explanatory-note">
										<td colspan="2">
											Zobrazují se pouze možnosti dostupné pro vybraný stát doručení.
										</td>
									</tr>
									<tr>
										<td>
											{label payment /}
										</td>
										<td>
											{input payment}
										</td>
									</tr>
									<tr class="explanatory-note">
										<td colspan="2">
											Zobrazují se pouze možnosti dostupné pro vybraný způsob dopravy.
										</td>
									</tr>
									<tr>
										<td>
											{label note /}
										</td>
										<td>
											{input note} <!--rows="4" cols="30"-->
										</td>
									</tr>
								{/formContainer}
							</tbody>
							<tbody>
								<tr>
									<td colspan="2">
										{input submit}
									</td>
								</tr>
							</tbody>
						</table>
					{/form}
				</div>
				<div class="re33">
					<h5 class="form-subheading">Rekapitulace objednávky</h5>
					<div class="order-recap">
						<div class="row">
							<div class="order-recap-price-label"> Cena nakupovaného zboží: </div> 
							<div  class="order-recap-price-of-smth"> 
								<span id="goods-price">
									{if fmod($productTotalPrice, 1) != 0}
										{$productTotalPrice|number:2:',':' '}
									{else}
										{$productTotalPrice}
									{/if}
								</span> Kč
							</div>
						</div>
						<div class="row">
							<div class="order-recap-price-label"> Cena dopravy: </div> 
							<div class="order-recap-price-of-smth"> <span id="delivery-price"></span> Kč</div>
						</div>
						<div class="row">
							<div class="order-recap-price-label"> Cena platby: </div> 
							<div class="order-recap-price-of-smth"> <span id="payment-price"></span> Kč</div>
						</div>
						<div class="row">
							<div class="order-recap-price-label"> Celková cena objednávky: </div> 
							<div class="order-recap-price-of-smth"> <span id="total-price"></span> Kč</div>
						</div>
					</div>
					<div class="order-recap-products">
						{foreach $basketItems as $item}
							<div class="row order-recap-basket-item">
								<div class="re25"><b>{$item->getProduct()->getName()}</b></div>
								<div class="re25">
									{if fmod($item->getProduct()->getPrice(), 1) != 0}
										{$item->getProduct()->getPrice()|number:2:',':' '}
									{else}
										{$item->getProduct()->getPrice()}
									{/if}
									Kč / ks 
								</div>
								<div class="re25">{$item->getQuantity()} kusů </div>
								<div class="re25">
									{if fmod($item->getPrice(), 1) != 0}
										{$item->getPrice()|number:2:',':' '}
									{else}
										{$item->getPrice()}
									{/if}
									Kč 
								</div>
								{if $item->getQuantity() === 0}
									<div class="unavailibility-warning">Bude automaticky odstraněno.</div>
								{/if}
							</div>
						{/foreach}
					</div>
				</div>
			</div>
		</div>
	</div> <!--container-->
	
	<script>
		const numberFormatter = new Intl.NumberFormat({ maximumSignificantDigits: 3 });
		const deliveryServicesGroupedByDelivery = JSON.parse({json_encode($deliveryServicesGroupedByDelivery)}); //a delivery service is defined by country, delivery and payment
		const deliveryServicesGroupedByCountry = JSON.parse({json_encode($deliveryServicesGroupedByCountry)});
		const countryIndependentDeliveryServicesGroupedByDelivery = JSON.parse({json_encode($countryIndependentDeliveryServicesGroupedByDelivery)});
		const paymentNames = JSON.parse({json_encode($paymentNames)});
		const deliveryNames = JSON.parse({json_encode($deliveryNames)});
		var differentAdressChecked = false;

		document.addEventListener("DOMContentLoaded", function() {
			updateDifferentAdressContainer();
			var defaultDeliveryId = document.getElementById('frm-purchaseForm-deliveryTerms-delivery').value;
			updateDeliveryServices();
			document.getElementById('frm-purchaseForm-deliveryTerms-delivery').value = defaultDeliveryId;
			var defaultPaymentId = document.getElementById('frm-purchaseForm-deliveryTerms-payment').value;
			updatePayments();
			document.getElementById('frm-purchaseForm-deliveryTerms-payment').value = defaultPaymentId;
			updateRecapPrices();
		});

		//when the country select field is clicked, update delivery + payment possibilities and recalculate prices
		document.getElementById('frm-purchaseForm-personalData-country').addEventListener("click", function(){
			updateDeliveryServices();
			updatePayments();
			updateRecapPrices();
		});

		//dtto but the other country field
		document.getElementById('frm-purchaseForm-deliveryAdress-country').addEventListener("click", function(){
			updateDeliveryServices();
			updatePayments();
			updateRecapPrices();
		});

		//when the delivery select field is clicked, update payment possibilities and recalculate prices
		document.getElementById('frm-purchaseForm-deliveryTerms-delivery').addEventListener("click", function(){
			updatePayments();
			updateRecapPrices();
		});

		//when the payment select field is clicked, recalculate prices
		document.getElementById('frm-purchaseForm-deliveryTerms-payment').addEventListener("click", function(){
			updateRecapPrices();
		});

		//when the different adress checkbox field is clicked, show/hide the delivery adress fields and update everything
		document.getElementById('differentAdress').addEventListener("click", function(){
			updateDifferentAdressContainer();
			updateDeliveryServices();
			updatePayments();
			updateRecapPrices();
		});

		//show or hide the delivery adress container and update the different adress variable
		function updateDifferentAdressContainer(){
			if(document.getElementById('differentAdress').checked == true){
				document.getElementById('deliveryAdressGroup').hidden = false;
				differentAdressChecked = true;
			} else {
				document.getElementById('deliveryAdressGroup').hidden = true;
				differentAdressChecked = false;
			}
		}

		//update all the prices on the right hand site of the page
		function updateRecapPrices(){
			var countryId = document.getElementById('frm-purchaseForm-personalData-country').value;
			var deliveryId = document.getElementById('frm-purchaseForm-deliveryTerms-delivery').value;
			var paymentId = document.getElementById('frm-purchaseForm-deliveryTerms-payment').value;

			//get the delivery price from one of the delivery services objects
			if(typeof countryIndependentDeliveryServicesGroupedByDelivery[deliveryId] == 'undefined'){
				var deliveryPrice = deliveryServicesGroupedByCountry[countryId][deliveryId].price;
			} else {
				var deliveryPrice = countryIndependentDeliveryServicesGroupedByDelivery[deliveryId].price;
			}

			//update the price in the recap
			document.getElementById('delivery-price').innerHTML = numberFormatter.format(deliveryPrice);

			//get the payment price from one of the delivery services objects
			if(typeof deliveryServicesGroupedByDelivery[deliveryId][countryId] == 'undefined'){
				var paymentPrice = deliveryServicesGroupedByDelivery[deliveryId]["N/A"]["payment"][paymentId];
			} else {
				var paymentPrice = deliveryServicesGroupedByDelivery[deliveryId][countryId]["payment"][paymentId];
			}

			//update the price in the recap
			document.getElementById('payment-price').innerHTML = numberFormatter.format(paymentPrice);

			var totalPrice = parseFloat(document.getElementById('goods-price').innerHTML) + deliveryPrice + paymentPrice;
			document.getElementById('total-price').innerHTML = numberFormatter.format(totalPrice);
		}

		//update options in the delivery field based on the currently selected country
		function updateDeliveryServices(){
			const deliverySelectField = document.getElementById('frm-purchaseForm-deliveryTerms-delivery');
			if(differentAdressChecked == false){
				var newOptions = generateDeliveryServicesOptions(document.getElementById('frm-purchaseForm-personalData-country').value, false);
			} else {
				var newOptions = generateDeliveryServicesOptions(document.getElementById('frm-purchaseForm-deliveryAdress-country').value, true);
			}
			replaceOptionsInSelectField(deliverySelectField, newOptions);
		}

		//delete all current options and add the new (relevant) ones
		function replaceOptionsInSelectField(field, newOptions){
			var numberOfOldOptions = field.options.length;
			for(var i = 0; i < numberOfOldOptions; i++){
				field.remove(0); //indexes are updated after each removal, hence the index 0 instead of i
			}
			
			for(var i = 0; i < newOptions.length; i++){
				field.add(newOptions[i]);
			}
		}

		//generate new options for the select field based on current country id
		function generateDeliveryServicesOptions(countryId, ignoreCountryIndependentDeliveryServices){
			var options = [];
			//country independent services are ignored when the different adress field is checked - when the customer wishes the goods to be delivered to other than
			//residential adress, they obviously don't want to pick them up at the store
			if(!ignoreCountryIndependentDeliveryServices){
				var countryIndependentKeys = Object.keys(countryIndependentDeliveryServicesGroupedByDelivery);
				for(var i = 0; i < countryIndependentKeys.length; i++){
					var option = document.createElement('option');
					option.value = countryIndependentKeys[i];
					option.text = deliveryNames[option.value] + ' (+' + numberFormatter.format(countryIndependentDeliveryServicesGroupedByDelivery[countryIndependentKeys[i]].price) + ' Kč)';
					options.push(option);
				}
			}

			if(typeof deliveryServicesGroupedByCountry[countryId] !== 'undefined'){
				var relevantDeliveryKeys = Object.keys(deliveryServicesGroupedByCountry[countryId]);
				for(var i = 0; i < relevantDeliveryKeys.length; i++){
					var option = document.createElement('option');
					option.value = relevantDeliveryKeys[i];
					option.text = deliveryNames[option.value] + ' (+' + numberFormatter.format(deliveryServicesGroupedByCountry[countryId][relevantDeliveryKeys[i]].price) + ' Kč)';
					options.push(option);
				}
			}
			return options;
		}

		//update options in the payment field based on the currently selected country & delivery
		function updatePayments(){
			const paymentSelectField = document.getElementById('frm-purchaseForm-deliveryTerms-payment');	
			if(differentAdressChecked == false){
				var countryId = document.getElementById('frm-purchaseForm-personalData-country').value;
			} else {
				var countryId = document.getElementById('frm-purchaseForm-deliveryAdress-country').value;
			}
			var newOptions = generatePaymentOptions(document.getElementById('frm-purchaseForm-deliveryTerms-delivery').value, countryId);
			replaceOptionsInSelectField(paymentSelectField, newOptions);
		}

		//generate new options for the select field based on current country id & delivery id
		function generatePaymentOptions(deliveryId, countryId){
			if(typeof deliveryServicesGroupedByDelivery[deliveryId][countryId] == 'undefined'){
				var relevantPaymentObject = deliveryServicesGroupedByDelivery[deliveryId]["N/A"].payment;
			} else {
				var relevantPaymentObject = deliveryServicesGroupedByDelivery[deliveryId][countryId].payment;
			}
			var relevantPaymentObjectKeys = Object.keys(relevantPaymentObject);
			var options = [];
			for(var i = 0; i < relevantPaymentObjectKeys.length; i++){
				var option = document.createElement('option');
				option.value = relevantPaymentObjectKeys[i];
				option.text = paymentNames[option.value] + ' (+' + numberFormatter.format(relevantPaymentObject[option.value]) + ' Kč)';
				options.push(option);
			}
			return options;
		}
	</script>
