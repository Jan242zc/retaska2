{block content}
	<div class="container">
		<div class="everything-wrapper">
			<h1 class="middle">Nákupní košík</h1>
			<div class="row">
				<div class="left">
					<a class="link-with-arrow" n:href="Product:default">< Zpět ke zboží</a>
				</div>
				<div class="right">
					<a class="link-with-arrow" href="#">Dokončit objednávku ></a>
				</div>
			</div>
			{form editBasketForm}
				<table>
					<thead>
						<tr>
							<td class="product-column">
								Produkt
							</td>
							<td class="price-column">
								Cena
							</td>
							<td class="altogether-column">
								Celková cena
							</td>
							<td class="quantity-column">
								Množství
							</td>
						</tr>
					</thead>
					<tbody>
						{foreach $basketItems as $item}
							<tr>
								<td>
									{$item->getProduct()->getName()}			
								</td>
								<td>
									<span class="product-price">{$item->getProduct()->getPrice()}</span> Kč / ks
								</td>
								<td>
									<span class="per-product-price">{$item->getPrice()}</span> Kč
								</td>
								<td hidden>
									<input type=text name="id[]" value={$item->getProduct()->getId()} hidden />
									<input type=checkbox value={$item->getProduct()->getId()} name="toBeDeleted[]"  />
									<input type=text name="quantity[]" class="quantity" value={$item->getQuantity()} /> 
								</td>
								<td>
									<input type=text name="visibleQuantity[]" class="quantity" value={$item->getQuantity()} /> 
									<button class="button-basket button-basket-minus">-</button>
									<button class="button-basket button-basket-plus">+</button>
									<button class="button-basket button-basket-delete">Odstranit</button>
								</td>
							</tr>
						{/foreach}
					</tbody>
					<tfoot>
						<tr>
							<td colspan="2" class="caveat">Provedené změny musejí být uloženy stisknutím tlačítka.</td>
							<td> <span id="totalPurchasePrice"></span> Kč </td>
							<td>{input submit}</td>
						</tr>
					</tfoot>
				</table>
			{/form}
			<div class="row">
				<div class="left">
					<a class="link-with-arrow" n:href="Product:default">< Zpět ke zboží</a>
				</div>
				<div class="right">
					<a class="link-with-arrow" href="#">Dokončit objednávku ></a>
				</div>
			</div>
		</div>
	</div>
	<script>
		//sets all neccessary event listeners
		document.addEventListener("DOMContentLoaded", function() { //přidat nastavení "ke smazání" v případě návratu do košíku tlačítkem zpět
			setDeleteButtonsEventListener();
			setMinusButtonEventListener();
			setPlusButtonEventListener();
			setQuantityFieldEventListener();
			setFormSubmitEventListener();
			updatePurchaseTotalPrice();
		});
		
		/* DELETING */
		var inputAndAllButtons = '';
		
		function setDeleteButtonsEventListener(){
			var buttons = document.getElementsByClassName('button-basket-delete');
			for(i = 0; i < buttons.length; i++){
				buttons[i].addEventListener("click", setRowToBeDeletedChangeItsClassAndSetTakeBackToGetPrepared);
			}
		}
		
		//changes the style of a row when it's marked to be deleted and sets the event listener of the 'take back' button
		function setRowToBeDeletedChangeItsClassAndSetTakeBackToGetPrepared(e){
			e.preventDefault();
			var checkBoxField = getCheckboxDeleteField(this);
			checkBoxField.checked = true; //hidden checkbox
			var parentRow = getParentRow(this);
			parentRow.classList.add('to-be-deleted'); //tr (row)
			var lastTdInRow = this.parentElement; //td with input and button
			inputAndAllButtons = lastTdInRow.innerHTML;
			lastTdInRow.innerHTML = 'Označeno k odstranění. <span class="take-back">Vzít zpět.</span>';
			var takeBackSpan = lastTdInRow.lastElementChild;
			setTakeBackEventListener(takeBackSpan);
		}
		
		function setTakeBackEventListener(element) {
			element.addEventListener("click", takeDeletionBack);
		}
		
		//removing delete class from the row, setting listener to the delete button
		function takeDeletionBack(e){
			var parentRow = getParentRow(this);
			parentRow.classList.remove('to-be-deleted'); //tr (row)
			this.parentElement.innerHTML = inputAndAllButtons;
			setDeleteButtonsEventListener();
		}
		
		/* QUANTITY */
		function setMinusButtonEventListener(){
			var buttons = document.getElementsByClassName('button-basket button-basket-minus');
			for(var i = 0; i < buttons.length; i++){
				buttons[i].addEventListener("click", minusButtonClicked);
			}
		}
		
		function setPlusButtonEventListener(){
			var buttons = document.getElementsByClassName('button-basket button-basket-plus');
			for(var i = 0; i < buttons.length; i++){
				buttons[i].addEventListener("click", plusButtonClicked);
			}
		}
		
		function setQuantityFieldEventListener(){
			var fields = document.getElementsByClassName('quantity');
			for(var i = 0; i < fields.length; i++){
				fields[i].addEventListener("keyup", quantityFieldValueChanged);
			}
		}
		
		//changing the value of quantity field by -1
		function minusButtonClicked(e){ 
			e.preventDefault();
			decreaseQuantity(this);
			updatePurchaseTotalPrice();
		};
		
		//changing the value of quantity field by +1
		function plusButtonClicked(e){
			e.preventDefault();
			increaseQuantity(this);
		}
		
		function quantityFieldValueChanged(e){
			var quantityField = getQuantityField(this);
			var quantity = this.value;
			quantityField.value = this.value;
			updateProductTotalPrice(this, this.value);
		}
		
		//changing the value of quantity field by -1
		function decreaseQuantity(element){
			var quantityField = getQuantityField(element);
			var visibleQuantityField = getVisibleQuantityField(element);
			var quantity = parseInt(quantityField.value);
			quantity = isNaN(quantity) ? 0 : quantity <= 0 ? 0 : --quantity; //only positive integers allowed
			visibleQuantityField.value = quantity;
			quantityField.value = quantity;
			updateProductTotalPrice(element, quantity);
			updatePurchaseTotalPrice();
		}
		
		//changing the value of quantity field by +1
		function increaseQuantity(element){
			var quantityField = getQuantityField(element);
			var visibleQuantityField = getVisibleQuantityField(element);
			var quantity = parseInt(quantityField.value);
			quantity = isNaN(quantity) ? 0 : quantity < 0 ? 1 : ++quantity; //only positive integers allowed
			visibleQuantityField.value = quantity;
			quantityField.value = quantity;
			updateProductTotalPrice(element, quantity);
			updatePurchaseTotalPrice();
		}
		
		//updating price in the price per product column
		function updateProductTotalPrice(element, quantity){
			var productTotalPriceField = getProductTotalPriceField(element);
			if(isNaN(quantity) || quantity < 0){
				quantity = 0;
			}
			productTotalPriceField.innerHTML = Math.ceil(quantity * parseFloat(getProductPrice(element).innerHTML));
			updatePurchaseTotalPrice();
		}
		
		function updatePurchaseTotalPrice(){
			var formRows = getFormTableRows();
			var prices = [];
			for(var i = 0; i < formRows.length; i++){
				var spanWithPerProductPriceInnerHTML = formRows[i].getElementsByClassName('per-product-price')[0].innerHTML;
				var perProductPrice = parseFloat(spanWithPerProductPriceInnerHTML);
				prices.push(perProductPrice);
			}
			var purchaseTotalPrice = 0;
			for(var i = 0; i < prices.length; i++){
				purchaseTotalPrice += prices[i];
			}
			var totalPurchasePriceElement = document.getElementById('totalPurchasePrice');
			totalPurchasePriceElement.innerHTML = purchaseTotalPrice;
		}
		
		/* FUNCTION THAT FIND VARIOUS ELEMENTS IN THE SAME ROW AS WHERE THE CALLING ELEMENT IS SITUATED */
		function getCheckboxDeleteField(element){
			return element.parentElement.parentElement.getElementsByTagName('input')[1];
		}
		
		function getParentRow(element){
			return element.parentElement.parentElement;
		}
		
		function getQuantityField(element){
			return element.parentElement.parentElement.getElementsByTagName('input')[2];
		}

		function getVisibleQuantityField(element){
			return element.parentElement.parentElement.getElementsByTagName('input')[3];
		}
				
		function getProductTotalPriceField(element){
			return element.parentElement.parentElement.children[2].children[0];
		}
		
		function getProductPrice(element){
			return element.parentElement.parentElement.getElementsByClassName('product-price')[0];
		}
		
		function getFormTableRows(){
			return document.getElementById('frm-editBasketForm').getElementsByTagName('table')[0].getElementsByTagName('tbody')[0].children;
		}
		
		/* SENSIBILITY */
		function setFormSubmitEventListener(){
			document.getElementById('frm-editBasketForm').addEventListener('submit', formSubmitted);
		}
		
		function formSubmitted(e){
			var quantityFields = document.getElementsByClassName('quantity');
			for(var i = 0; i < quantityFields.length; i++){
				var quantityValue = parseFloat(quantityFields[i].value); //float, because quantity being also integer is verifiend in the if statement
				if(!Number.isInteger(quantityValue) || isNaN(quantityValue) || quantityValue < 0){
					e.preventDefault();
					alert('Množství musí být celé kladné číslo.');
					break;
				}
			}
		}
	</script>
